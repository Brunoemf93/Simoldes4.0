#include "mytcpsocket.h"

TCP_client::MyTcpSocket(){}

uint16_t TCP_client::ConnectToHost(const char *inIPAddress, const uint8_t inPort){

    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0){
        qDebug() << "\n Socket creation error \n";
        return -1;
    }

    memset(&serv_addr, '0', sizeof(serv_addr));

    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(inPort);

    if(inet_pton(AF_INET, inIPAddress, &serv_addr.sin_addr) <= 0){
        qDebug() << "\nInvalid address/ Address not supported \n";
        return -1;
    }

    if(connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0){
        qDebug() << "\nConnection Failed \n";
        return -1;
    }
    
    return 0;
}

uint16_t TCP_client::getBufferSize(){
    
    return BUFFER_SIZE;     
}

uint16_t TCP_client::SendMessage(const char &inData){

     uint16_t bytes_Read;
     char readBuf[BUFFER_SIZE] = {0};

     send(sock, inData, strlen(inData), 0);

     if(shutdown(sock, SHUT_WR) != 0)
        qDebug() << "Socket-shutdown not completed";

     bytes_Read = recv(sock, readBuf, BUFFER_SIZE, 0);
     qDebug() << readBuf;

     return bytes_Read;
}
